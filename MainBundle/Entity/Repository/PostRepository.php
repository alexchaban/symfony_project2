<?php

namespace MainBundle\Entity\Repository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
	public function retrieveDashboardPosts(\MainBundle\Entity\User $user, \MainBundle\Entity\User $thisUser, $params = array())
	{
		$thisUserId = $thisUser->getId();
		$userId = $user->getId();
		$isSupporter = $user->getSupporter();
		$userFriendsArr = array($userId);
		$start = (isset($params['start'])) ? $params['start'] : 0;
		$length = (isset($params['length'])) ? $params['length'] : 5;

		$aim = (isset($params['aim'])) ? $params['aim'] : 'home';
		$type = (isset($params['type'])) ? $params['type'] : 'all';

		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();

		$userFriends = $em->getRepository('MainBundle:UserFriend')->findBy(array('user' => $userId));

		foreach ($userFriends as $friend)
		{
			$userFriendsArr[] = $friend->getFriend()->getId();
		}

		$qb->select(
			array(
				'p.id',
				'IDENTITY (p.user) as user_id',
				"CONCAT(u1.firstname, ' ', u1.lastname) as fullname",
				'u1.username as username',
				'p.title',
				'p.content',
				'pi.path AS image',
				'p.type',
				'p.public',
				'p.createdOn as created_on',
				'IDENTITY (v.visionPerson) as vision_person_id',
				"CONCAT(u2.firstname, ' ', u2.lastname) as vision_person_name",
				'u2.username as vision_person_username',
				'v.visionTimer as vision_timer',
				'a.slug AS aim',
				//'IF(uf.user, 1, 0) as favorite'
				//'CASE WHEN uf.user THEN 1 ELSE 0 END as favorite'
				'(CASE WHEN uf.id IS NULL THEN 0 ELSE 1 END) AS favorite'
			)
		)
		->from('MainBundle:Post', 'p')
		->leftJoin('MainBundle:Vision', 'v', 'WITH', 'p.id = v.post')
		->leftJoin('MainBundle:User', 'u1', 'WITH', 'p.user = u1.id')
		->leftJoin('MainBundle:User', 'u2', 'WITH', 'v.visionPerson = u2.id')
		->leftJoin('MainBundle:UserFavorite', 'uf', 'WITH', 'p.id = uf.post AND :thisUserId = uf.user')
		->leftJoin('MainBundle:Aim', 'a', 'WITH', 'p.aim = a.id')
		->leftJoin('MainBundle:PostImage', 'pi', 'WITH', 'pi.post = p.id');

		$qb->setParameter(':thisUserId', $thisUserId);

		if ($isSupporter !== true)
		{
			$qb->where(
				$qb->expr()->orX(
					$qb->expr()->in('p.user', ':userFriends'),
					$qb->expr()->in('v.visionPerson', ':userFriends')
				)
			)
			->setParameter('userFriends', $userFriendsArr);
		}
		$qb->andWhere("p.type <> 'reply'");
		
		if (isset($params['favorites']))
		{
			$qb->andWhere("uf.id > 0");
		}
		if (isset($params['content']))
		{
			$qb->andWhere($qb->expr()->orX(
				$qb->expr()->isNotNull("pi.path"),
				$qb->expr()->like("p.content" , $qb->expr()->literal('%<img%')),
				$qb->expr()->like("p.content" , $qb->expr()->literal('%<iframe%'))
			));
		}
		if (isset($params['expires']))
		{
			$qb->andWhere(
				$qb->expr()->gt('v.visionTimer', ':today'),
				$qb->expr()->lt('v.visionTimer', ':expire')
			);
			$qb->setParameter('today', date('Y-m-d H:i:s'));
			$qb->setParameter('expire', date('Y-m-d H:i:s' , time() + $params['expires_in']));
		}
		
		if ('all' != $type)
		{
			$qb->andWhere($qb->expr()->eq('p.type', ':type'));
			$qb->setParameter('type', $type);
		}

		if ('home' != $aim)
		{
			$qb->andWhere($qb->expr()->eq('a.slug', ':aim'));
			$qb->setParameter('aim', $aim);
		}

		if ($start != 0)
		{
			$qb->andWhere($qb->expr()->lt('p.id', $start));
		}

		$qb->orderBy('p.id', 'DESC');

		if ($start == 0)
		{
			$qb->setFirstResult($start);
		}
		$qb->setMaxResults($length);

		$query = $qb->getQuery();
		//var_dump($query->getSql());die;
		$result = $query->getArrayResult();

		return $result;
	}

	public function getPostData($postId)
	{
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();

		$qb->select(
			array(
				'p.id',
				'IDENTITY (p.user) as user_id',
				"CONCAT(u1.firstname, ' ', u1.lastname) as fullname",
				'u1.username as username',
				'p.title',
				'p.content',
				'pi.path AS image',
				'p.type',
				'a.slug AS aim',
				'p.public',
				'p.createdOn as created_on',
				'IDENTITY (v.visionPerson) as vision_person_id',
				"CONCAT(u2.firstname, ' ', u2.lastname) as vision_person_name",
				'v.visionTimer as vision_timer'
			)
		)
		->from('MainBundle:Post', 'p')
		->leftJoin('MainBundle:Vision', 'v', 'WITH', 'p.id = v.post')
		->leftJoin('MainBundle:User', 'u1', 'WITH', 'p.user = u1.id')
		->leftJoin('MainBundle:User', 'u2', 'WITH', 'v.visionPerson = u2.id')
		->leftJoin('MainBundle:Aim', 'a', 'WITH', 'p.aim = a.id')
		->leftJoin('MainBundle:PostImage', 'pi', 'WITH', 'pi.post = p.id')
		->where($qb->expr()->eq('p.id', ':postId'))
		->setParameter(':postId', $postId);
		
		$query = $qb->getQuery();
		//$result = $query->getArrayResult();
		$result = $query->getSingleResult();

		return $result;
	}
}
